#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Anticrossing Analyzer
"""

import os
import sys
import numpy as np
import matplotlib.pyplot as plt

def test_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    
    try:
        import numpy as np
        print(f"‚úì NumPy {np.__version__}")
    except ImportError:
        print("‚úó NumPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import scipy
        print(f"‚úì SciPy {scipy.__version__}")
    except ImportError:
        print("‚úó SciPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import matplotlib
        print(f"‚úì Matplotlib {matplotlib.__version__}")
    except ImportError:
        print("‚úó Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import pandas as pd
        print(f"‚úì Pandas {pd.__version__}")
    except ImportError:
        print("‚úó Pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def test_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    data_files = [
        'data/CoherentCoupling_S21.txt',
        'data/CoherentCoupling_S12.txt'
    ]
    
    all_exist = True
    for file_path in data_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path) / 1024  # –≤ KB
            print(f"‚úì {file_path} ({size:.1f} KB)")
        else:
            print(f"‚úó {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def test_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        print("‚úì –§–∞–π–ª config.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_attrs = [
            'DATA_DIR', 'RESULTS_DIR', 'DATA_FILES',
            'ANALYSIS_TYPE', 'INITIAL_PARAMS_SINGLE'
        ]
        
        for attr in required_attrs:
            if hasattr(config, attr):
                print(f"‚úì –ü–∞—Ä–∞–º–µ—Ç—Ä {attr} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚úó –ü–∞—Ä–∞–º–µ—Ç—Ä {attr} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.py: {e}")
        return False

def test_results_directory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    results_dir = 'results'
    if os.path.exists(results_dir):
        files = os.listdir(results_dir)
        print(f"‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {results_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({len(files)} —Ñ–∞–π–ª–æ–≤)")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
        if files:
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for file in sorted(files)[-5:]:
                print(f"  - {file}")
        
        return True
    else:
        print(f"‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        import anticrossing_analyzer as aa
        print("‚úì –ú–æ–¥—É–ª—å anticrossing_analyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        functions = ['load_data', 'fit_spectrum', 'main']
        for func_name in functions:
            if hasattr(aa, func_name):
                print(f"‚úì –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚úó –§—É–Ω–∫—Ü–∏—è {func_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("="*60)
    print("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ANTICROSSING ANALYZER")
    print("="*60)
    
    tests = [
        ("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", test_installation),
        ("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", test_data_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", test_results_directory),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", run_quick_test)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
    
    print("\n" + "="*60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return 1

if __name__ == "__main__":
    sys.exit(main())