ПРОМПТ ДЛЯ АНАЛИЗА АНТИКРОССИНГА МОД ФМР И РЕЗОНАТОРА

Вы - эксперт по анализу экспериментальных данных в области спинтроники и магнонных устройств. Ваша задача - написать максимально простой и эффективный Python-скрипт для анализа данных антикроссинга мод ФМР (ферромагнитного резонанса) и резонатора.

ЭКСПЕРИМЕНТАЛЬНЫЕ ДАННЫЕ:
- Представляют собой измеренные S-параметры (только амплитуды, без фазы) в зависимости от частоты (в ГГц) и магнитного поля (в Э)
- Файлы данных содержат матрицы в формате: первая строка - значения частот, первый столбец (кроме первого элемента) - значения поля, остальные элементы - измеренные амплитуды S-параметров в дБ
- Данные хранятся в текстовых файлах с разделителями-табуляциями

ТЕОРЕТИЧЕСКАЯ МОДЕЛЬ:
Для случая одной моды ФМР используется формула:
S₂₁(ω) = 1 + κ / [i(ω - ωc) - (κ + β) + (-[iJ + Γe^(iΘ)]²) / (i(ω - ωm) - (α + γ))]

где:
- Θ = 0 (если измеряется S₂₁), Θ = π (если измеряется S₁₂)
- κ и γ - внешние потери резонаторной и магнонной мод соответственно
- ωc - резонансная частота резонатора
- ωm - резонансная частота магнонной моды
- J - коэффициент когерентной связи между модами
- Γ - коэффициент диссипативной связи между модами
- α - внутренние потери магнонной моды
- β - внутренние потери резонаторной моды

Для случая нескольких мод ФМР нужно добавить соответствующее количество лоренцевых пиков в формуле.

ТРЕБОВАНИЯ К СКРИПТУ:

1. СТРУКТУРА ПРОЕКТА:
   - Создать отдельный конфигурационный файл (config.py) с:
     * Путями к папке с данными и результатами
     * Теоретической формулой для фитинга
     * Начальными параметрами для оптимизации
   
2. ОСНОВНОЙ ФУНКЦИОНАЛ:
   - Загрузка экспериментальных данных из текстовых файлов
   - Создание контурного графика (contourf) исходных данных S-параметров
   - Автоматическая подгонка теоретической модели к каждому спектру (при фиксированном поле)
   - Извлечение параметров: резонансные частоты, коэффициенты связи, потери
   - Визуализация результатов фитинга на контурных графиках

3. ТЕХНИЧЕСКИЕ ТРЕБОВАНИЯ:
   - Использовать scipy.optimize для подгонки параметров
   - Использовать matplotlib для визуализации с контурными графиками
   - Использовать numpy для обработки данных
   - Код должен быть простым, без избыточной объектно-ориентированности
   - Все настройки вынести в конфигурационный файл
   - Добавить базовую обработку ошибок и логирование процесса (если это не сильно нагрузит код)

4. ВИЗУАЛИЗАЦИЯ:
   - Контурный график исходных данных
   - Контурный график результатов фитинга
   - Графики извлеченных параметров в зависимости от поля
   - Сохранение всех графиков в файлы

6. ВЫХОДНЫЕ ДАННЫЕ:
   - CSV файл с извлеченными параметрами для каждого значения поля
   - Графические файлы с результатами анализа
   - Лог-файл с информацией о процессе анализа и найденных проблемах

ДОПОЛНИТЕЛЬНЫЕ УКАЗАНИЯ:
- Скрипт должен работать "здесь и сейчас" без необходимости доработок
- Приоритет - простота и эффективность над универсальностью
- Предусмотреть возможность анализа как S12, так и S21 параметров
- Добавить автоматическое определение количества мод ФМР в данных (если это не сильно нагрузит код)
- Использовать разумные начальные приближения для параметров фитинга (либо можно предусмотреть добавление их вручную)

ПРИМЕР ИСПОЛЬЗОВАНИЯ:
Пользователь должен иметь возможность просто запустить скрипт, указав в config.py путь к данным, и получить полный анализ с визуализацией и сохраненными результатами.

Создайте полнофункциональный Python-скрипт с конфигурационным файлом, который выполняет весь описанный анализ данных антикроссинга мод.